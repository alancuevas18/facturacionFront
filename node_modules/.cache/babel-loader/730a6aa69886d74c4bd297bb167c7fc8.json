{"remainingRequest":"/Users/alancuevas/Documents/Projects/EmacFacturacion/node_modules/babel-loader/lib/index.js!/Users/alancuevas/Documents/Projects/EmacFacturacion/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/alancuevas/Documents/Projects/EmacFacturacion/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/alancuevas/Documents/Projects/EmacFacturacion/src/components/WorldMap/WorldMap.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/alancuevas/Documents/Projects/EmacFacturacion/src/components/WorldMap/WorldMap.vue","mtime":1670228071000},{"path":"/Users/alancuevas/Documents/Projects/EmacFacturacion/babel.config.js","mtime":1670228070000},{"path":"/Users/alancuevas/Documents/Projects/EmacFacturacion/node_modules/cache-loader/dist/cjs.js","mtime":1676518230225},{"path":"/Users/alancuevas/Documents/Projects/EmacFacturacion/node_modules/babel-loader/lib/index.js","mtime":1676518230575},{"path":"/Users/alancuevas/Documents/Projects/EmacFacturacion/node_modules/cache-loader/dist/cjs.js","mtime":1676518230225},{"path":"/Users/alancuevas/Documents/Projects/EmacFacturacion/node_modules/vue-loader/lib/index.js","mtime":1676518230651}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9yZWdlbmVyYXRvclJ1bnRpbWUgZnJvbSAiL1VzZXJzL2FsYW5jdWV2YXMvRG9jdW1lbnRzL1Byb2plY3RzL0VtYWNGYWN0dXJhY2lvbi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vcmVnZW5lcmF0b3JSdW50aW1lLmpzIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9hbGFuY3VldmFzL0RvY3VtZW50cy9Qcm9qZWN0cy9FbWFjRmFjdHVyYWNpb24vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudmFsdWVzLmpzIjsKaW1wb3J0ICdkMyc7CmltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJzsKaW1wb3J0ICd0b3BvanNvbic7CmltcG9ydCBEYXRhTWFwIGZyb20gJ2RhdGFtYXBzJzsKaW1wb3J0IHsgdGhyb3R0bGUgfSBmcm9tICdzcmMvdXRpbC90aHJvdHRsZSc7CmV4cG9ydCBkZWZhdWx0IHsKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgY29sb3IxOiAnI0FBQUFBQScsCiAgICAgIGNvbG9yMjogJyM0NDQ0NDQnLAogICAgICBoaWdobGlnaHRGaWxsQ29sb3I6ICcjNjY2MTVCJywKICAgICAgYm9yZGVyQ29sb3I6ICcjM2MzYzNjJywKICAgICAgaGlnaGxpZ2h0Qm9yZGVyQ29sb3I6ICcjM2MzYzNjJywKICAgICAgbWFwRGF0YTogewogICAgICAgIEFVUzogNzYwLAogICAgICAgIEJSQTogNTUwLAogICAgICAgIENBTjogMTIwLAogICAgICAgIERFVTogMTMwMCwKICAgICAgICBGUkE6IDU0MCwKICAgICAgICBHQlI6IDY5MCwKICAgICAgICBHRU86IDIwMCwKICAgICAgICBJTkQ6IDIwMCwKICAgICAgICBST1U6IDYwMCwKICAgICAgICBSVVM6IDMwMCwKICAgICAgICBVU0E6IDI5MjAKICAgICAgfQogICAgfTsKICB9LAogIG1ldGhvZHM6IHsKICAgIGdlbmVyYXRlQ29sb3JzOiBmdW5jdGlvbiBnZW5lcmF0ZUNvbG9ycyhsZW5ndGgpIHsKICAgICAgcmV0dXJuIGQzLnNjYWxlTGluZWFyKCkuZG9tYWluKFswLCBsZW5ndGhdKS5yYW5nZShbdGhpcy5jb2xvcjEsIHRoaXMuY29sb3IyXSk7CiAgICB9LAogICAgZ2VuZXJhdGVNYXBDb2xvcnM6IGZ1bmN0aW9uIGdlbmVyYXRlTWFwQ29sb3JzKCkgewogICAgICB2YXIgbWFwRGF0YVZhbHVlcyA9IE9iamVjdC52YWx1ZXModGhpcy5tYXBEYXRhKTsKICAgICAgdmFyIG1heFZhbCA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIG1hcERhdGFWYWx1ZXMpOwogICAgICB2YXIgY29sb3JzID0gdGhpcy5nZW5lcmF0ZUNvbG9ycyhtYXhWYWwpOwogICAgICB2YXIgbWFwRGF0YSA9IHt9OwogICAgICB2YXIgZmlsbHMgPSB7CiAgICAgICAgZGVmYXVsdEZpbGw6ICcjZTRlNGU0JwogICAgICB9OwogICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5tYXBEYXRhKSB7CiAgICAgICAgdmFyIHZhbCA9IHRoaXMubWFwRGF0YVtrZXldOwogICAgICAgIGZpbGxzW2tleV0gPSBjb2xvcnModmFsKTsKICAgICAgICBtYXBEYXRhW2tleV0gPSB7CiAgICAgICAgICBmaWxsS2V5OiBrZXksCiAgICAgICAgICB2YWx1ZTogdmFsCiAgICAgICAgfTsKICAgICAgfQogICAgICByZXR1cm4gewogICAgICAgIG1hcERhdGE6IG1hcERhdGEsCiAgICAgICAgZmlsbHM6IGZpbGxzCiAgICAgIH07CiAgICB9LAogICAgaW5pdFZlY3Rvck1hcDogZnVuY3Rpb24gaW5pdFZlY3Rvck1hcCgpIHsKICAgICAgdmFyIF90aGlzJGdlbmVyYXRlTWFwQ29sbyA9IHRoaXMuZ2VuZXJhdGVNYXBDb2xvcnMoKSwKICAgICAgICBmaWxscyA9IF90aGlzJGdlbmVyYXRlTWFwQ29sby5maWxscywKICAgICAgICBtYXBEYXRhID0gX3RoaXMkZ2VuZXJhdGVNYXBDb2xvLm1hcERhdGE7CiAgICAgIHZhciB3b3JsZE1hcCA9IG5ldyBEYXRhTWFwKHsKICAgICAgICBzY29wZTogJ3dvcmxkJywKICAgICAgICBlbGVtZW50OiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd29ybGRNYXAnKSwKICAgICAgICBmaWxsczogZmlsbHMsCiAgICAgICAgZGF0YTogbWFwRGF0YSwKICAgICAgICByZXNwb25zaXZlOiB0cnVlLAogICAgICAgIGdlb2dyYXBoeUNvbmZpZzogewogICAgICAgICAgYm9yZGVyQ29sb3I6IHRoaXMuYm9yZGVyQ29sb3IsCiAgICAgICAgICBib3JkZXJXaWR0aDogMC41LAogICAgICAgICAgYm9yZGVyT3BhY2l0eTogMC44LAogICAgICAgICAgaGlnaGxpZ2h0RmlsbENvbG9yOiB0aGlzLmhpZ2hsaWdodEZpbGxDb2xvciwKICAgICAgICAgIGhpZ2hsaWdodEJvcmRlckNvbG9yOiB0aGlzLmhpZ2hsaWdodEJvcmRlckNvbG9yLAogICAgICAgICAgaGlnaGxpZ2h0Qm9yZGVyV2lkdGg6IDAuNSwKICAgICAgICAgIGhpZ2hsaWdodEJvcmRlck9wYWNpdHk6IDAuOAogICAgICAgIH0KICAgICAgfSk7CiAgICAgIHZhciByZXNpemVGdW5jID0gd29ybGRNYXAucmVzaXplLmJpbmQod29ybGRNYXApOwogICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZnVuY3Rpb24gKCkgewogICAgICAgIHRocm90dGxlKHJlc2l6ZUZ1bmMsIDQwKTsKICAgICAgfSwgZmFsc2UpOwogICAgfQogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICB3aGlsZSAoMSkgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBfdGhpcy5pbml0VmVjdG9yTWFwKCk7CiAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZSk7CiAgICB9KSkoKTsKICB9Cn07"},{"version":3,"mappings":";;;AAIA;AACA;AACA;AACA;AACA;AAEA;EACAA;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;MACA;IACA;EACA;EACAC;IACAC;MACA,UACAC,cACAC,oBACAC;IACA;IACAC;MACA;MACA;MACA;MACA;MACA;QACAC;MACA;MACA;QACA;QACAC;QACAnB;UACAoB;UACAC;QACA;MACA;MACA;QACArB;QACAmB;MACA;IACA;IACAG;MACA;QAAAH;QAAAnB;MACA;QACAuB;QACAC;QACAL;QACAzB;QACA+B;QACAC;UACA5B;UACA6B;UACAC;UACA/B;UACAE;UACA8B;UACAC;QACA;MACA;MACA;MACAC,wBACA,UACA;QACAC;MACA,GACA,MACA;IACA;EACA;EACAC;IAAA;IAAA;MAAA;QAAA;UAAA;YACA;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EACA;AACA","names":["data","color1","color2","highlightFillColor","borderColor","highlightBorderColor","mapData","AUS","BRA","CAN","DEU","FRA","GBR","GEO","IND","ROU","RUS","USA","methods","generateColors","scaleLinear","domain","range","generateMapColors","defaultFill","fills","fillKey","value","initVectorMap","scope","element","responsive","geographyConfig","borderWidth","borderOpacity","highlightBorderWidth","highlightBorderOpacity","window","throttle","mounted"],"sourceRoot":"src/components/WorldMap","sources":["WorldMap.vue"],"sourcesContent":["<template>\n  <div id=\"worldMap\" style=\"height: 300px;\"></div>\n</template>\n<script>\nimport 'd3';\nimport * as d3 from 'd3';\nimport 'topojson';\nimport DataMap from 'datamaps';\nimport { throttle } from 'src/util/throttle';\n\nexport default {\n  data() {\n    return {\n      color1: '#AAAAAA',\n      color2: '#444444',\n      highlightFillColor: '#66615B',\n      borderColor: '#3c3c3c',\n      highlightBorderColor: '#3c3c3c',\n      mapData: {\n        AUS: 760,\n        BRA: 550,\n        CAN: 120,\n        DEU: 1300,\n        FRA: 540,\n        GBR: 690,\n        GEO: 200,\n        IND: 200,\n        ROU: 600,\n        RUS: 300,\n        USA: 2920\n      }\n    };\n  },\n  methods: {\n    generateColors(length) {\n      return d3\n        .scaleLinear()\n        .domain([0, length])\n        .range([this.color1, this.color2]);\n    },\n    generateMapColors() {\n      let mapDataValues = Object.values(this.mapData);\n      let maxVal = Math.max(...mapDataValues);\n      let colors = this.generateColors(maxVal);\n      let mapData = {};\n      let fills = {\n        defaultFill: '#e4e4e4'\n      };\n      for (let key in this.mapData) {\n        let val = this.mapData[key];\n        fills[key] = colors(val);\n        mapData[key] = {\n          fillKey: key,\n          value: val\n        };\n      }\n      return {\n        mapData,\n        fills\n      };\n    },\n    initVectorMap() {\n      let { fills, mapData } = this.generateMapColors();\n      let worldMap = new DataMap({\n        scope: 'world',\n        element: document.getElementById('worldMap'),\n        fills,\n        data: mapData,\n        responsive: true,\n        geographyConfig: {\n          borderColor: this.borderColor,\n          borderWidth: 0.5,\n          borderOpacity: 0.8,\n          highlightFillColor: this.highlightFillColor,\n          highlightBorderColor: this.highlightBorderColor,\n          highlightBorderWidth: 0.5,\n          highlightBorderOpacity: 0.8\n        }\n      });\n      let resizeFunc = worldMap.resize.bind(worldMap);\n      window.addEventListener(\n        'resize',\n        () => {\n          throttle(resizeFunc, 40);\n        },\n        false\n      );\n    }\n  },\n  async mounted() {\n    this.initVectorMap();\n  }\n};\n</script>\n<style></style>\n"]}]}