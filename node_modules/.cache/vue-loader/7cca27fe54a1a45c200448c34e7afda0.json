{"remainingRequest":"/Users/alancuevas/Documents/Projects/EmacFacturacion/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/alancuevas/Documents/Projects/EmacFacturacion/src/components/Wizard/Wizard.vue?vue&type=style&index=0&id=79a5f9a2&lang=scss&","dependencies":[{"path":"/Users/alancuevas/Documents/Projects/EmacFacturacion/src/components/Wizard/Wizard.vue","mtime":1670228071000},{"path":"/Users/alancuevas/Documents/Projects/EmacFacturacion/node_modules/css-loader/dist/cjs.js","mtime":1676518230438},{"path":"/Users/alancuevas/Documents/Projects/EmacFacturacion/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1676518230866},{"path":"/Users/alancuevas/Documents/Projects/EmacFacturacion/node_modules/postcss-loader/src/index.js","mtime":1676518230571},{"path":"/Users/alancuevas/Documents/Projects/EmacFacturacion/node_modules/sass-loader/dist/cjs.js","mtime":1676518230226},{"path":"/Users/alancuevas/Documents/Projects/EmacFacturacion/node_modules/cache-loader/dist/cjs.js","mtime":1676518230225},{"path":"/Users/alancuevas/Documents/Projects/EmacFacturacion/node_modules/vue-loader/lib/index.js","mtime":1676518230651}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci8qIFRhYiBjb250ZW50IGFuaW1hdGlvbiAqLwoudGFiLWNvbnRlbnQgewogIGRpc3BsYXk6IGZsZXg7IC8vIHRvIGF2b2lkIGhvcml6b250YWwgc2Nyb2xsIHdoZW4gYW5pbWF0aW5nCiAgLnRhYi1wYW5lIHsKICAgIGRpc3BsYXk6IGJsb2NrOwogICAgYW5pbWF0aW9uOiBmYWRlSW4gMC41czsKICAgIHdpZHRoOiAxMDAlOwogIH0KfQoKLyoqCiAgICAgIEV4dHJhIG5pY2V0aWVzLiBEaXNwbGF5IGVycm9yIHRhYnMgYW5kIGRpc2FibGUgbmF2aWdhdGlvbiB1bnZpc2l0ZWQgdGFicwogICAgICovCi53aXphcmQtbmF2aWdhdGlvbiAubmF2LWxpbmsgewogICYuYWN0aXZlLAogICYuY2hlY2tlZCB7CiAgICBjdXJzb3I6IHBvaW50ZXI7CiAgfQp9CgouZGlzYWJsZWQtd2l6YXJkLWxpbmsgewogIGN1cnNvcjogbm90LWFsbG93ZWQ7Cn0K"},{"version":3,"sources":["Wizard.vue"],"names":[],"mappings":";AAuSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"Wizard.vue","sourceRoot":"src/components/Wizard","sourcesContent":["<template>\n  <div class=\"wizard-container\">\n    <div class=\"card card-wizard active\" id=\"wizardProfile\">\n      <form @submit.prevent>\n        <!--\n          You can switch \" data-color=\"primary\" \"  with one of the next bright colors: \"green\", \"orange\", \"red\", \"blue\"\n        -->\n        <div class=\"card-header text-center\">\n          <slot name=\"header\">\n            <h3 v-if=\"title\" class=\"card-title\">{{ title }}</h3>\n            <h5 v-if=\"subTitle\" class=\"description\">{{ subTitle }}</h5>\n          </slot>\n\n          <div class=\"wizard-navigation\">\n            <div class=\"progress-with-circle\">\n              <div\n                class=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuenow=\"1\"\n                aria-valuemin=\"1\"\n                aria-valuemax=\"3\"\n                :style=\"{ width: `${progress}%` }\"\n              ></div>\n            </div>\n            <ul class=\"nav nav-pills\">\n              <li\n                v-for=\"(tab, index) in tabs\"\n                :key=\"tab.title\"\n                role=\"tab\"\n                :tabindex=\"tab.checked ? 0 : ''\"\n                :id=\"`step-${tab.tabId}`\"\n                :aria-controls=\"tab.tabId\"\n                :aria-disabled=\"!tab.active\"\n                :aria-selected=\"tab.active\"\n                :ref=\"`tab-${index}`\"\n                class=\"nav-item wizard-tab-link\"\n                :style=\"linkWidth\"\n              >\n                <a\n                  class=\"nav-link\"\n                  @click=\"navigateToTab(index)\"\n                  :class=\"[\n                    { 'disabled-wizard-link': !tab.checked },\n                    { active: tab.active },\n                    { checked: tab.checked }\n                  ]\"\n                  data-toggle=\"tab\"\n                >\n                  <tab-item-content :tab=\"tab\"></tab-item-content>\n                </a>\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        <div class=\"card-body\">\n          <div class=\"tab-content\">\n            <slot :activeIndex=\"activeTabIndex\" :activeTab=\"activeTab\"> </slot>\n          </div>\n        </div>\n\n        <div class=\"card-footer\">\n          <slot name=\"footer\" :next-tab=\"nextTab\" :prev-tab=\"prevTab\">\n            <div class=\"pull-right\">\n              <base-button\n                v-if=\"activeTabIndex < tabCount - 1\"\n                type=\"primary\"\n                wide\n                @click.native=\"nextTab\"\n                class=\"btn-next\"\n              >\n                {{ nextButtonText }}\n              </base-button>\n              <base-button v-else wide @click.native=\"nextTab\">{{\n                finishButtonText\n              }}</base-button>\n            </div>\n\n            <div class=\"pull-left\">\n              <base-button\n                v-if=\"activeTabIndex > 0\"\n                wide\n                type=\"primary\"\n                @click.native=\"prevTab\"\n                class=\"btn-previous\"\n              >\n                {{ prevButtonText }}\n              </base-button>\n            </div>\n            <div class=\"clearfix\"></div>\n          </slot>\n        </div>\n      </form>\n    </div>\n  </div>\n</template>\n<script>\nimport { throttle } from './throttle';\n\nexport default {\n  name: 'simple-wizard',\n  props: {\n    startIndex: {\n      type: Number,\n      default: 0\n    },\n    title: {\n      type: String,\n      default: 'Title'\n    },\n    subTitle: {\n      type: String,\n      default: 'Subtitle'\n    },\n    prevButtonText: {\n      type: String,\n      default: 'Previous'\n    },\n    nextButtonText: {\n      type: String,\n      default: 'Next'\n    },\n    finishButtonText: {\n      type: String,\n      default: 'Finish'\n    },\n    vertical: {\n      type: Boolean\n    }\n  },\n  components: {\n    TabItemContent: {\n      functional: true,\n      props: ['tab'],\n      render(h, {props}) {\n        let content = props.tab.$slots.label;\n        if(content && content.length){\n          return content;\n        }\n        return h('span', [props.tab.$slots.label, props.tab.label])\n      }\n    }\n  },\n  provide() {\n    return {\n      addTab: this.addTab,\n      removeTab: this.removeTab\n    };\n  },\n  data() {\n    return {\n      tabs: [],\n      activeTabIndex: 0,\n      tabLinkWidth: 0,\n      tabLinkHeight: 50\n    };\n  },\n  computed: {\n    tabCount() {\n      return this.tabs.length;\n    },\n    linkWidth() {\n      let width = 100;\n      if (this.tabCount > 0) {\n        width = 100 / this.tabCount;\n      }\n      if (this.vertical) {\n        width = 100;\n      }\n      return { width: `${width}%` };\n    },\n    activeTab() {\n      return this.tabs[this.activeTabIndex];\n    },\n    stepPercentage() {\n      return (1 / (this.tabCount * 2)) * 100;\n    },\n    progress() {\n      let percentage = 0;\n      if (this.activeTabIndex > 0) {\n        let stepsToAdd = 1;\n        let stepMultiplier = 2;\n        percentage =\n          this.stepPercentage *\n          (this.activeTabIndex * stepMultiplier + stepsToAdd);\n      } else {\n        percentage = this.stepPercentage;\n      }\n      return percentage;\n    }\n  },\n  methods: {\n    addTab(tab) {\n      const index = this.$slots.default.indexOf(tab.$vnode);\n      let tabTitle = tab.title || '';\n      tab.tabId = `${tabTitle.replace(/ /g, '')}${index}`;\n      if (!this.activeTab && index === 0) {\n        tab.active = true;\n        tab.checked = true;\n      }\n      if (this.activeTab === tab.name) {\n        tab.active = true;\n        tab.checked = true;\n      }\n      this.tabs.splice(index, 0, tab);\n    },\n    removeTab(tab) {\n      const tabs = this.tabs;\n      const index = tabs.indexOf(tab);\n      if (index > -1) {\n        tabs.splice(index, 1);\n      }\n    },\n    validate(tab) {\n      let tabToValidate = tab || this.activeTab;\n      let beforeChange = tabToValidate.beforeChange;\n      if (beforeChange) {\n        return Promise.resolve(beforeChange())\n          .then(res => {\n            this.activeTab.hasError = res ? false : true;\n            return res;\n          })\n          .catch(() => {\n            this.activeTab.hasError = true;\n          });\n      } else {\n        return Promise.resolve(true);\n      }\n    },\n    async nextTab() {\n      let isValid = await this.validate();\n      if (isValid && this.activeTabIndex < this.tabCount - 1) {\n        this.activeTabIndex++;\n      }\n      return isValid;\n    },\n    prevTab() {\n      this.activeTabIndex--;\n    },\n    async navigateToTab(index) {\n      if (this.tabs[index].checked) {\n        // recursively validate each tab\n        if (index > this.activeTabIndex) {\n          let valid = await this.nextTab();\n          if (valid) {\n            this.navigateToTab(index);\n          }\n        } else {\n          this.activeTabIndex = index;\n        }\n      }\n    },\n    onResize() {\n      let tabLinks = document.getElementsByClassName('wizard-tab-link');\n      if (tabLinks.length > 0 && this.tabCount > 0) {\n        let { clientWidth, clientHeight } = tabLinks[0];\n        this.tabLinkWidth = clientWidth;\n        this.tabLinkHeight = clientHeight;\n      }\n    }\n  },\n  mounted() {\n    this.activeTabIndex = this.startIndex;\n    this.$nextTick(() => {\n      this.tabs[this.activeTabIndex].active = true;\n      this.tabs[this.activeTabIndex].checked = true;\n      this.onResize();\n    });\n    window.addEventListener(\n      'resize',\n      () => {\n        throttle(this.onResize, 40);\n      },\n      false\n    );\n  },\n  watch: {\n    activeTabIndex(newValue, oldValue) {\n      if (newValue !== oldValue) {\n        let oldTab = this.tabs[oldValue];\n        let newTab = this.tabs[newValue];\n        oldTab.active = false;\n        newTab.active = true;\n\n        if (!newTab.checked) {\n          newTab.checked = true;\n        }\n        this.$emit('tab-change', oldTab, newTab);\n        this.$emit('update:startIndex', newValue);\n      }\n    }\n  }\n};\n</script>\n<style lang=\"scss\">\n/* Tab content animation */\n.tab-content {\n  display: flex; // to avoid horizontal scroll when animating\n  .tab-pane {\n    display: block;\n    animation: fadeIn 0.5s;\n    width: 100%;\n  }\n}\n\n/**\n      Extra niceties. Display error tabs and disable navigation unvisited tabs\n     */\n.wizard-navigation .nav-link {\n  &.active,\n  &.checked {\n    cursor: pointer;\n  }\n}\n\n.disabled-wizard-link {\n  cursor: not-allowed;\n}\n</style>\n"]}]}