{"remainingRequest":"/Users/alancuevas/Documents/Projects/EmacFacturacion/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/alancuevas/Documents/Projects/EmacFacturacion/src/components/WorldMap/WorldMap.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/alancuevas/Documents/Projects/EmacFacturacion/src/components/WorldMap/WorldMap.vue","mtime":1670228071000},{"path":"/Users/alancuevas/Documents/Projects/EmacFacturacion/node_modules/cache-loader/dist/cjs.js","mtime":1676518230225},{"path":"/Users/alancuevas/Documents/Projects/EmacFacturacion/node_modules/babel-loader/lib/index.js","mtime":1676518230575},{"path":"/Users/alancuevas/Documents/Projects/EmacFacturacion/node_modules/cache-loader/dist/cjs.js","mtime":1676518230225},{"path":"/Users/alancuevas/Documents/Projects/EmacFacturacion/node_modules/vue-loader/lib/index.js","mtime":1676518230651}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCAnZDMnOwppbXBvcnQgKiBhcyBkMyBmcm9tICdkMyc7CmltcG9ydCAndG9wb2pzb24nOwppbXBvcnQgRGF0YU1hcCBmcm9tICdkYXRhbWFwcyc7CmltcG9ydCB7IHRocm90dGxlIH0gZnJvbSAnc3JjL3V0aWwvdGhyb3R0bGUnOwoKZXhwb3J0IGRlZmF1bHQgewogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBjb2xvcjE6ICcjQUFBQUFBJywKICAgICAgY29sb3IyOiAnIzQ0NDQ0NCcsCiAgICAgIGhpZ2hsaWdodEZpbGxDb2xvcjogJyM2NjYxNUInLAogICAgICBib3JkZXJDb2xvcjogJyMzYzNjM2MnLAogICAgICBoaWdobGlnaHRCb3JkZXJDb2xvcjogJyMzYzNjM2MnLAogICAgICBtYXBEYXRhOiB7CiAgICAgICAgQVVTOiA3NjAsCiAgICAgICAgQlJBOiA1NTAsCiAgICAgICAgQ0FOOiAxMjAsCiAgICAgICAgREVVOiAxMzAwLAogICAgICAgIEZSQTogNTQwLAogICAgICAgIEdCUjogNjkwLAogICAgICAgIEdFTzogMjAwLAogICAgICAgIElORDogMjAwLAogICAgICAgIFJPVTogNjAwLAogICAgICAgIFJVUzogMzAwLAogICAgICAgIFVTQTogMjkyMAogICAgICB9CiAgICB9OwogIH0sCiAgbWV0aG9kczogewogICAgZ2VuZXJhdGVDb2xvcnMobGVuZ3RoKSB7CiAgICAgIHJldHVybiBkMwogICAgICAgIC5zY2FsZUxpbmVhcigpCiAgICAgICAgLmRvbWFpbihbMCwgbGVuZ3RoXSkKICAgICAgICAucmFuZ2UoW3RoaXMuY29sb3IxLCB0aGlzLmNvbG9yMl0pOwogICAgfSwKICAgIGdlbmVyYXRlTWFwQ29sb3JzKCkgewogICAgICBsZXQgbWFwRGF0YVZhbHVlcyA9IE9iamVjdC52YWx1ZXModGhpcy5tYXBEYXRhKTsKICAgICAgbGV0IG1heFZhbCA9IE1hdGgubWF4KC4uLm1hcERhdGFWYWx1ZXMpOwogICAgICBsZXQgY29sb3JzID0gdGhpcy5nZW5lcmF0ZUNvbG9ycyhtYXhWYWwpOwogICAgICBsZXQgbWFwRGF0YSA9IHt9OwogICAgICBsZXQgZmlsbHMgPSB7CiAgICAgICAgZGVmYXVsdEZpbGw6ICcjZTRlNGU0JwogICAgICB9OwogICAgICBmb3IgKGxldCBrZXkgaW4gdGhpcy5tYXBEYXRhKSB7CiAgICAgICAgbGV0IHZhbCA9IHRoaXMubWFwRGF0YVtrZXldOwogICAgICAgIGZpbGxzW2tleV0gPSBjb2xvcnModmFsKTsKICAgICAgICBtYXBEYXRhW2tleV0gPSB7CiAgICAgICAgICBmaWxsS2V5OiBrZXksCiAgICAgICAgICB2YWx1ZTogdmFsCiAgICAgICAgfTsKICAgICAgfQogICAgICByZXR1cm4gewogICAgICAgIG1hcERhdGEsCiAgICAgICAgZmlsbHMKICAgICAgfTsKICAgIH0sCiAgICBpbml0VmVjdG9yTWFwKCkgewogICAgICBsZXQgeyBmaWxscywgbWFwRGF0YSB9ID0gdGhpcy5nZW5lcmF0ZU1hcENvbG9ycygpOwogICAgICBsZXQgd29ybGRNYXAgPSBuZXcgRGF0YU1hcCh7CiAgICAgICAgc2NvcGU6ICd3b3JsZCcsCiAgICAgICAgZWxlbWVudDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3dvcmxkTWFwJyksCiAgICAgICAgZmlsbHMsCiAgICAgICAgZGF0YTogbWFwRGF0YSwKICAgICAgICByZXNwb25zaXZlOiB0cnVlLAogICAgICAgIGdlb2dyYXBoeUNvbmZpZzogewogICAgICAgICAgYm9yZGVyQ29sb3I6IHRoaXMuYm9yZGVyQ29sb3IsCiAgICAgICAgICBib3JkZXJXaWR0aDogMC41LAogICAgICAgICAgYm9yZGVyT3BhY2l0eTogMC44LAogICAgICAgICAgaGlnaGxpZ2h0RmlsbENvbG9yOiB0aGlzLmhpZ2hsaWdodEZpbGxDb2xvciwKICAgICAgICAgIGhpZ2hsaWdodEJvcmRlckNvbG9yOiB0aGlzLmhpZ2hsaWdodEJvcmRlckNvbG9yLAogICAgICAgICAgaGlnaGxpZ2h0Qm9yZGVyV2lkdGg6IDAuNSwKICAgICAgICAgIGhpZ2hsaWdodEJvcmRlck9wYWNpdHk6IDAuOAogICAgICAgIH0KICAgICAgfSk7CiAgICAgIGxldCByZXNpemVGdW5jID0gd29ybGRNYXAucmVzaXplLmJpbmQod29ybGRNYXApOwogICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigKICAgICAgICAncmVzaXplJywKICAgICAgICAoKSA9PiB7CiAgICAgICAgICB0aHJvdHRsZShyZXNpemVGdW5jLCA0MCk7CiAgICAgICAgfSwKICAgICAgICBmYWxzZQogICAgICApOwogICAgfQogIH0sCiAgYXN5bmMgbW91bnRlZCgpIHsKICAgIHRoaXMuaW5pdFZlY3Rvck1hcCgpOwogIH0KfTsK"},{"version":3,"sources":["WorldMap.vue"],"names":[],"mappings":";AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"WorldMap.vue","sourceRoot":"src/components/WorldMap","sourcesContent":["<template>\n  <div id=\"worldMap\" style=\"height: 300px;\"></div>\n</template>\n<script>\nimport 'd3';\nimport * as d3 from 'd3';\nimport 'topojson';\nimport DataMap from 'datamaps';\nimport { throttle } from 'src/util/throttle';\n\nexport default {\n  data() {\n    return {\n      color1: '#AAAAAA',\n      color2: '#444444',\n      highlightFillColor: '#66615B',\n      borderColor: '#3c3c3c',\n      highlightBorderColor: '#3c3c3c',\n      mapData: {\n        AUS: 760,\n        BRA: 550,\n        CAN: 120,\n        DEU: 1300,\n        FRA: 540,\n        GBR: 690,\n        GEO: 200,\n        IND: 200,\n        ROU: 600,\n        RUS: 300,\n        USA: 2920\n      }\n    };\n  },\n  methods: {\n    generateColors(length) {\n      return d3\n        .scaleLinear()\n        .domain([0, length])\n        .range([this.color1, this.color2]);\n    },\n    generateMapColors() {\n      let mapDataValues = Object.values(this.mapData);\n      let maxVal = Math.max(...mapDataValues);\n      let colors = this.generateColors(maxVal);\n      let mapData = {};\n      let fills = {\n        defaultFill: '#e4e4e4'\n      };\n      for (let key in this.mapData) {\n        let val = this.mapData[key];\n        fills[key] = colors(val);\n        mapData[key] = {\n          fillKey: key,\n          value: val\n        };\n      }\n      return {\n        mapData,\n        fills\n      };\n    },\n    initVectorMap() {\n      let { fills, mapData } = this.generateMapColors();\n      let worldMap = new DataMap({\n        scope: 'world',\n        element: document.getElementById('worldMap'),\n        fills,\n        data: mapData,\n        responsive: true,\n        geographyConfig: {\n          borderColor: this.borderColor,\n          borderWidth: 0.5,\n          borderOpacity: 0.8,\n          highlightFillColor: this.highlightFillColor,\n          highlightBorderColor: this.highlightBorderColor,\n          highlightBorderWidth: 0.5,\n          highlightBorderOpacity: 0.8\n        }\n      });\n      let resizeFunc = worldMap.resize.bind(worldMap);\n      window.addEventListener(\n        'resize',\n        () => {\n          throttle(resizeFunc, 40);\n        },\n        false\n      );\n    }\n  },\n  async mounted() {\n    this.initVectorMap();\n  }\n};\n</script>\n<style></style>\n"]}]}